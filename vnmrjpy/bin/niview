#!/usr/bin/python3

import os
import numpy as np
import nibabel as nib
from argparse import ArgumentParser
import vnmrjpy as vj

"""
Niview : image viewer for VnmrJ data
====================================
"""

class Niview():
    """Lightweight viewer for Vnmrj data files in various formats

    Can read and show:
        Nifit1 : .nii / .nii.gz
        Vnmrj image file :  .fdf / .img
        Vnmrj raw data file:  .fid

    Intended to work from the command line.
    """
    def __init__(self, nifti=None, img=None,\
                fid=None, showkspace=False, ch=None, addch=True,\
                absolute=True, magn=False, phase=False, imag=False, real=False):  # fid options

        if nifti is not None:
            self.img = nib.load(nifti)
            self.data = self.img.get_fdata()
            self.affine = self.img.affine
            print('input nifti shape: {}'.format(self.data.shape))

        elif img is not None:

            fdfrdr = vj.io.FdfReader(img)
            data, hdr = fdfrdr.read() 
            procpar = fdfrdr.procpar
            nwr = vj.io.NiftiWriter(data, procpar)
            self.affine = nwr.aff
            self.data = data
            print('input img shape: {}'.format(self.data.shape))
                
        elif fid is not None:
            # reading fid gets more options:
            fidfile = fid + '/fid'
            procpar = fid + '/procpar'
            fid_data, fidhdr = vj.io.FidReader(fidfile, procpar).read()
            kspace = vj.recon.KspaceMaker(fid_data, fidhdr, procpar).make()
            kspace = vj.recon.KspaceCompleter(kspace, procpar).make()
            nwr = vj.io.NiftiWriter(kspace[0,...], procpar)
            self.affine = nwr.aff
            
            # show kspace
            if showkspace == True:

                if ch == None:
                    # concatenate channels along time dimension
                    rcvrlst = [kspace[i,...] for i in range(kspace.shape[0])]
                    data = np.concatenate(rcvrlst,axis=-1)
                else:
                    data = kspace[ch,...]

                if absolute == True:
                    self.data = np.absolute(data)

            # show image space
            else:
                data5d = vj.recon.ImageSpaceMaker(kspace, procpar).make()

                # plot absolute values
                if absolute == True:
                    if ch == None:
                        if addch ==True:
                            rcvrlst = [np.absolute(data5d[i,...]) for i in range(data5d.shape[0])]
                            self.data = np.mean(rcvrlst,axis=0)
                        elif addch == False:
                            # concatenate channels along time dimension
                            rcvrlst = [np.absolute(data5d[i,...]) for i in range(data5d.shape[0])]
                            self.data = np.concatenate(rcvrlst,axis=-1)
                    else:
                        pass
                        raise(Exception('not implemented'))
                # plot phase values
                elif phase == True:
                    if ch == None:
                        # concatenate channels along time dimension
                        rcvrlst = [np.arctan2(np.imag(data5d[i,...]),\
                            np.real(data5d[i,...])) for i in range(data5d.shape[0])]
                        self.data = np.concatenate(rcvrlst,axis=-1)
                    else:
                        raise(Exception('not implemented'))


        else:

            print('Possibly wrong input. Quitting ...')
            return
        #finding dimension with 1 length

    def interactiveplot(self):
        """Using nibabel built-in viewer"""

        v = nib.viewers.OrthoSlicer3D(self.data, affine=self.affine)
        v.show()

if __name__ == '__main__':

    parser = ArgumentParser()
    parser.add_argument('nifti')
    parser.add_argument('--phase',action='store_true')
    parser.add_argument('--magn',action='store_true')
    args = parser.parse_args()
    if str(args.nifti).endswith('.nii') or \
        str(args.nifti).endswith('.nii.gz'):
        print('Reading .nii file ...')
  
        nv = Niview(nifti=str(args.nifti))
        nv.interactiveplot()

    elif str(args.nifti).endswith('.img') and \
        os.path.isdir(str(args.nifti)):
    
        print('Reading .fdf images in .img direcory ...')
        nv = Niview(img=str(args.nifti))
        nv.interactiveplot()

    elif str(args.nifti).endswith('.fid') and\
        os.path.isdir(str(args.nifti)):
        print('Reading .fid file in .fid direcory ...')
        if args.phase:
            nv = Niview(fid=str(args.nifti),phase=args.phase, absolute=False)
            nv.interactiveplot()
    else:
        print('Wrong input: not a .nii/.fid/.img file or dir')
